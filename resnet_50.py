# -*- coding: utf-8 -*-
"""RESNET_50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lEGvdQ6x9OrHlR-8CaSHDXjYjc8z2Bmv
"""

import tensorflow as tf
from tensorflow.keras.applications.resnet import ResNet50, preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator

image_size = (224, 224)
batch_size = 8

train_path = r'/content/drive/MyDrive/Dataset/Train'
test_path = r'/content/drive/MyDrive/Dataset/Test'

train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)
test_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

train_batches = train_datagen.flow_from_directory(train_path,target_size=image_size,batch_size=batch_size,class_mode='binary',shuffle=True)
test_batches = test_datagen.flow_from_directory(test_path,target_size=image_size,batch_size=batch_size,class_mode='binary',shuffle=False)

# creation
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
for layer in base_model.layers:
    layer.trainable = False
x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
predictions = tf.keras.layers.Dense(1, activation='sigmoid')(x)

#compilation
model = tf.keras.models.Model(inputs=base_model.input, outputs=predictions)

#training
model.compile(optimizer='SGD', loss='binary_crossentropy', metrics=['accuracy'])

#evaluation
history=model.fit(train_batches, epochs=10, validation_data=test_batches)

model.save('/content/drive/MyDrive/ResNet50.h5')

loaded_model = tf.keras.models.load_model('/content/drive/MyDrive/ResNet50.h5')
print("Model loaded successfully."
     )

new_images = [r'/content/drive/MyDrive/Dataset/Test/cancer 1/2.JPEG']
for image_path in new_images:
    img = tf.keras.preprocessing.image.load_img(image_path, target_size=image_size)
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    prediction = loaded_model.predict(img_array)
    if prediction >=0.5:
        print("Cancer")
    else:
        print("Non-Cancer")

import matplotlib.pylab as plt
train_loss=history.history['loss']
val_loss=history.history['val_loss']
train_acc=history.history['accuracy']

val_acc=history.history['val_accuracy']
xc=range(len(val_loss))


plt.figure(1,figsize=(9,5))
plt.plot(xc,train_loss)
plt.plot(xc,val_loss)
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('SGD-Batch_Size=8')
plt.grid(True)
plt.legend(['loss','validation loss'],loc='center right')
plt.style.use(['classic'])

train_loss=history.history['loss']
val_loss=history.history['val_loss']
train_acc=history.history['accuracy']
val_acc=history.history['val_accuracy']
xc=range(len(val_loss))


plt.figure(1,figsize=(9,5))
plt.plot(xc,train_acc)
plt.plot(xc,val_acc)
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('SGD-Batch_Size=8')
plt.grid(True)
plt.legend(['accuracy','validation accuracy'],loc='lower right')
plt.style.use(['classic'])

model.evaluate(test_batches)