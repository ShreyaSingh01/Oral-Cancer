# -*- coding: utf-8 -*-
"""PROPOSED_MODEL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RpdwpoURLjIppExz_akHxTC8C2TZPakb
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img,img_to_array

image_size = (224, 224)
batch_size = 8

train_path = r'/content/drive/MyDrive/Dataset/Train'
test_path = r'/content/drive/MyDrive/Dataset/Test'

train_datagen = ImageDataGenerator(rescale=1.0/255.0)  # Normalize pixel values between 0 and 1
test_datagen = ImageDataGenerator(rescale=1.0/255.0)

train_batches = train_datagen.flow_from_directory(train_path, target_size=image_size, batch_size=batch_size, class_mode='binary', shuffle=True)
test_batches = test_datagen.flow_from_directory(test_path, target_size=image_size, batch_size=batch_size, class_mode='binary', shuffle=False)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(256, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='SGD', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(train_batches, epochs=20, validation_data=test_batches)

model.save('/content/drive/MyDrive/PROPOSED_MODEL.h5')

loaded_model = tf.keras.models.load_model('/content/drive/MyDrive/PROPOSED_MODEL.h5')
print("Model loaded successfully."
     )

class_indices = {0: "cancer", 1: "non-cancer"}

image_path = r'/content/drive/MyDrive/Dataset/Test/non cancer 1/dataset_jlspo68f92i21.JPEG'

img = load_img(image_path, target_size=image_size)
img_array = img_to_array(img)
img_array = tf.expand_dims(img_array, axis=0)
img_array = img_array / 255.0  # Normalize pixel values between 0 and 1

prediction = model.predict(img_array)
class_index = tf.argmax(prediction, axis=1).numpy()[0]

class_label = class_indices[class_index]

print("Predicted class label:", class_label)

import matplotlib.pylab as plt
train_loss=history.history['loss']
val_loss=history.history['val_loss']
train_acc=history.history['accuracy']
val_acc=history.history['val_accuracy']
xc=range(len(val_loss))


plt.figure(1,figsize=(9,5))
plt.plot(xc,train_loss)
plt.plot(xc,val_loss)
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('SGD-Batch_Size=8')
plt.grid(True)
plt.legend(['loss','validation loss'],loc='upper left')
plt.style.use(['classic'])

train_loss=history.history['loss']
val_loss=history.history['val_loss']
train_acc=history.history['accuracy']
val_acc=history.history['val_accuracy']
xc=range(len(val_loss))


plt.figure(1,figsize=(9,5))
plt.plot(xc,train_acc)
plt.plot(xc,val_acc)
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('SGD-Batch_Size=8')
plt.grid(True)
plt.legend(['accuracy','validation accuracy'],loc='lower right')
plt.style.use(['classic'])

model.evaluate(test_batches)